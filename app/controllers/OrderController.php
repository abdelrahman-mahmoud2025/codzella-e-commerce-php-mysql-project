<?php
// ๐ฆ OrderController - ุงููุชุญูู ุงูุฎุงุต ุจุงูุทูุจุงุช ูุงูุฏูุน
// ุจูุฑุซ ูู HomeController ุนุดุงู ูุณุชุฎุฏู ุฏูุงู view ู redirect

class OrderController extends HomeController {
    
    // ูุชุบูุฑ ุฎุงุต ุจู Order Model (ููุชุนุงูู ูุน ุฌุฏูู ุงูุทูุจุงุช)
    private $orderModel;
    // ูุชุบูุฑ ุฎุงุต ุจู Validator (ููุชุญูู ูู ุงูุจูุงูุงุช)
    private $validator;
    
    // Constructor - ุจูุดุชุบู ุฃูู ูุง ูุนูู ูุงุฆู ูู ุงูููุงุณ
    public function __construct() {
        // ุฅูุดุงุก ูุงุฆู ูู Order Model
        $this->orderModel = new Order();
        // ุฅูุดุงุก ูุงุฆู ูู ValidationHelper
        $this->validator = new ValidationHelper();
    }
    
    // ๐ ุฏุงูุฉ ุนุฑุถ ุทูุจุงุช ุงููุณุชุฎุฏู
    public function index() {
        // ูู ุงููุณุชุฎุฏู ูุด ูุณุฌู ุฏุฎููุ ุฑูุญู ูุตูุญุฉ ุชุณุฌูู ุงูุฏุฎูู
        if (!SessionHelper::isLoggedIn()) {
            $this->redirect('/login');
        }
        
        // ุฌูุจ ID ุงููุณุชุฎุฏู ูู ุงูู Session
        $userId = SessionHelper::getUserId();
        // ุฌูุจ ูู ุทูุจุงุช ุงููุณุชุฎุฏู ุฏู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        $orders = $this->orderModel->getUserOrders($userId);
        
        // ุฌูุฒ ุงูุจูุงูุงุช
        $data = [
            'title' => 'My Orders',  // ุนููุงู ุงูุตูุญุฉ
            'orders' => $orders  // ูุงุฆูุฉ ุงูุทูุจุงุช
        ];
        
        // ุงุนุฑุถ ุตูุญุฉ ุทูุจุงุชู
        $this->view('orders/index', $data);
    }
    
    // ๐ ุฏุงูุฉ ุนุฑุถ ุชูุงุตูู ุทูุจ ูุงุญุฏ
    public function show($orderId) {
        // ูู ุงููุณุชุฎุฏู ูุด ูุณุฌู ุฏุฎููุ ุฑูุญู ูุตูุญุฉ ุชุณุฌูู ุงูุฏุฎูู
        if (!SessionHelper::isLoggedIn()) {
            $this->redirect('/login');
        }
        
        // ุฌูุจ ุจูุงูุงุช ุงูุทูุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
        $order = $this->orderModel->findById($orderId);
        
        // ุชุญูู ุฅู ุงูุทูุจ ููุฌูุฏ ูุฅู ุงููุณุชุฎุฏู ูู ุตุงุญุจ ุงูุทูุจ (ุญูุงูุฉ)
        // ููููุนุด ูุณุชุฎุฏู ูุดูู ุทูุจุงุช ูุณุชุฎุฏู ุชุงูู
        if (!$order || $order['user_id'] != SessionHelper::getUserId()) {
            // ูู ุงูุทูุจ ูุด ููุฌูุฏ ุฃู ูุด ุจุชุงุนูุ ุงุนุฑุถ ุตูุญุฉ 404
            $this->notFound();
            return;
        }
        
        // ุฌูุจ ุงูููุชุฌุงุช ุงููู ูู ุงูุทูุจ ุฏู
        $orderItems = $this->orderModel->getOrderItems($orderId);
        
        // ุฌูุฒ ุงูุจูุงูุงุช
        $data = [
            'title' => 'Order #' . $order['order_number'],  // ุนููุงู ุงูุตูุญุฉ
            'order' => $order,  // ุจูุงูุงุช ุงูุทูุจ
            'orderItems' => $orderItems  // ุงูููุชุฌุงุช ูู ุงูุทูุจ
        ];
        
        // ุงุนุฑุถ ุตูุญุฉ ุชูุงุตูู ุงูุทูุจ
        $this->view('orders/show', $data);
    }
    
    // ๐ณ ุฏุงูุฉ ุตูุญุฉ ุงูุฏูุน (Checkout)
    public function checkout() {
        // ูู ุงููุณุชุฎุฏู ูุด ูุณุฌู ุฏุฎููุ ูุงุฒู ูุณุฌู ุฏุฎูู ุงูุฃูู
        if (!SessionHelper::isLoggedIn()) {
            SessionHelper::setFlash('error', 'ูุงุฒู ุชุณุฌู ุฏุฎูู ุงูุฃูู');
            $this->redirect('/login');
        }
        
        // ูู ุงูุณูุฉ ูุงุถูุฉุ ููููุนุด ูููู
        if (CartHelper::isEmpty()) {
            SessionHelper::setFlash('error', 'ุงูุณูุฉ ูุงุถูุฉ');
            $this->redirect('/cart');
        }
        
        // ุชุญูู ูู ุงููุฎุฒูู (ูู ููุชุฌ ุฎูุตุ ููููู)
        $stockErrors = CartHelper::validateStock();
        if (!empty($stockErrors)) {
            // ูู ูู ููุชุฌุงุช ุฎูุตุชุ ุงุนุฑุถ ุฑุณุงูุฉ ููู ููุชุฌ
            foreach ($stockErrors as $error) {
                SessionHelper::setFlash('error', $error);
            }
            // ุฑูุญู ููุณูุฉ ุนุดุงู ูุดูู ุงูููุชุฌุงุช ุงููู ุฎูุตุช
            $this->redirect('/cart');
        }
        
        // ูู ุงููุณุชุฎุฏู ุนุงูู Submit (ุถุบุท ุนูู ุฒุฑ Place Order)
        if ($_SERVER['REQUEST_METHOD'] === 'POST') {
            // ุชุญูู ูู CSRF Token (ุญูุงูุฉ)
            if (!SessionHelper::verifyCsrfToken($_POST['csrf_token'] ?? '')) {
                SessionHelper::setFlash('error', 'Invalid request');
                $this->redirect('/checkout');
            }
            
            // ูุถู ุงูุจูุงูุงุช ุงููู ุฌุช ูู ุงูููุฑู
            $data = ValidationHelper::sanitize($_POST);
            
            // ููุงุนุฏ ุงูุชุญูู ูู ุจูุงูุงุช ุงูุดุญู
            $rules = [
                'shipping_name' => 'required|min:3|max:100',  // ุงูุงุณู ูุทููุจ
                'shipping_email' => 'required|email',  // ุงูุจุฑูุฏ ูุทููุจ ูุตุญูุญ
                'shipping_phone' => 'required|min:10',  // ุงููุงุชู ูุทููุจ
                'shipping_address' => 'required|min:10'  // ุงูุนููุงู ูุทููุจ
            ];
            
            // ุชุญูู ูู ุงูุจูุงูุงุช
            if ($this->validator->validate($data, $rules)) {
                // ูู ุญุงุฌุฉ ุชูุงูุ ุฌูุจ ุงูุณูุฉ ูุงููุฌููุน
                $cart = CartHelper::getCart();
                $total = CartHelper::getTotal();
                
                // ุฌูุฒ ุจูุงูุงุช ุงูุทูุจ
                $orderData = [
                    'user_id' => SessionHelper::getUserId(),  // ID ุงููุณุชุฎุฏู
                    'total_amount' => $total,  // ุงููุฌููุน ุงูููู
                    'shipping_name' => $data['shipping_name'],  // ุงุณู ุงููุณุชูู
                    'shipping_email' => $data['shipping_email'],  // ุจุฑูุฏ ุงููุณุชูู
                    'shipping_phone' => $data['shipping_phone'],  // ูุงุชู ุงููุณุชูู
                    'shipping_address' => $data['shipping_address'],  // ุนููุงู ุงูุดุญู
                    'notes' => $data['notes'] ?? null  // ููุงุญุธุงุช (ุงุฎุชูุงุฑู)
                ];
                
                // ุฃูุดุฆ ุงูุทูุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
                $orderId = $this->orderModel->create($orderData, $cart);
                
                // ูู ุฅูุดุงุก ุงูุทูุจ ูุฌุญ
                if ($orderId) {
                    // ุฌูุจ ุจูุงูุงุช ุงูุทูุจ (ุนุดุงู ูุฌูุจ ุฑูู ุงูุทูุจ)
                    $order = $this->orderModel->findById($orderId);
                    $orderData['order_number'] = $order['order_number'];
                    
                    // ุฌูุฒ ุงูููุชุฌุงุช ุจุตูุบุฉ Stripe
                    $lineItems = StripeHelper::formatLineItems($cart);
                    // ุฃูุดุฆ ุฌูุณุฉ ุฏูุน ูู Stripe
                    $session = StripeHelper::createCheckoutSession($orderData, $lineItems);
                    
                    // ูู ุฅูุดุงุก ุฌูุณุฉ Stripe ูุฌุญ
                    if ($session) {
                        // ุงุญูุธ Stripe session ID ูุน ุงูุทูุจ
                        $this->orderModel->updatePaymentStatus($orderId, 'pending', $session->id);
                        
                        // ูุฑุบ ุงูุณูุฉ (ุงูุทูุจ ุงุชุนูู ุฎูุงุต)
                        CartHelper::clear();
                        
                        // ุญูู ุงููุณุชุฎุฏู ูุตูุญุฉ Stripe ููุฏูุน
                        if (isset($session->url)) {
                            header("Location: " . $session->url);
                            exit;
                        } else {
                            // ูู ูููุด URLุ ุฑูุญ ูุตูุญุฉ ุงููุฌุงุญ ูุจุงุดุฑุฉ
                            $this->redirect('/orders/success?order_id=' . $orderId);
                        }
                    } else {
                        // ูู ุฅูุดุงุก ุฌูุณุฉ Stripe ูุดู
                        SessionHelper::setFlash('error', 'ููู ูุดููุฉ ูู ุงูุฏูุน. ุชุญูู ูู ููุงุชูุญ Stripe.');
                        $this->redirect('/checkout');
                    }
                } else {
                    // ูู ุฅูุดุงุก ุงูุทูุจ ูุดู
                    SessionHelper::setFlash('error', 'ููู ูุดููุฉ ูู ุฅูุดุงุก ุงูุทูุจ');
                    $this->redirect('/checkout');
                }
            } else {
                // ูู ูู ุฃุฎุทุงุก ูู ุงูุจูุงูุงุชุ ุงุนุฑุถ ุฃูู ุฎุทุฃ
                SessionHelper::setFlash('error', $this->validator->getFirstError());
                $this->redirect('/checkout');
            }
        }
        
        // ุฌูุจ ุงูุณูุฉ ูุงููุฌููุน ุนุดุงู ูุนุฑุถูู ูู ุงูุตูุญุฉ
        $cart = CartHelper::getCart();
        $total = CartHelper::getTotal();
        
        // ุฌูุฒ ุงูุจูุงูุงุช ูุตูุญุฉ Checkout
        $data = [
            'title' => 'Checkout',  // ุนููุงู ุงูุตูุญุฉ
            'cart' => $cart,  // ูุญุชููุงุช ุงูุณูุฉ
            'total' => $total,  // ุงููุฌููุน ุงูููู
            'csrf_token' => SessionHelper::generateCsrfToken()  // CSRF Token
        ];
        
        // ุงุนุฑุถ ุตูุญุฉ Checkout
        $this->view('orders/checkout', $data);
    }
    
    // โ ุฏุงูุฉ ุตูุญุฉ ุงููุฌุงุญ (ุจุนุฏ ุงูุฏูุน ุงููุงุฌุญ)
    public function success() {
        // ูู ุงููุณุชุฎุฏู ูุด ูุณุฌู ุฏุฎููุ ุฑูุญู ููุตูุญุฉ ุงูุฑุฆูุณูุฉ
        if (!SessionHelper::isLoggedIn()) {
            $this->redirect('/');
        }
        
        // ุฌูุจ Stripe session ID ูู ุงูู URL (Stripe ุจูุจุนุชู ููุง ูุฑุฌุน ุงููุณุชุฎุฏู)
        $sessionId = $_GET['session_id'] ?? null;
        // ุฌูุจ order ID ูู ุงูู URL (ูู ููุฌูุฏ)
        $orderId = $_GET['order_id'] ?? null;
        
        // ูู ูู session ID (ูุนูู ุฌุงู ูู Stripe)
        if ($sessionId) {
            // ุฌูุจ ุจูุงูุงุช ุงูุฌูุณุฉ ูู Stripe
            $session = StripeHelper::retrieveSession($sessionId);
            
            // ูู ุงูุฌูุณุฉ ููุฌูุฏุฉ
            if ($session) {
                // ุฌูุจ ุญุงูุฉ ุงูุฏูุน ูู Stripe
                $paymentStatus = $session->payment_status ?? null;
                
                // ูู ุงูุฏูุน ูุฌุญ (paid)
                if ($paymentStatus === 'paid') {
                    // ุฌูุจ ุฑูู ุงูุทูุจ ูู metadata (ุงุญูุง ุจุนุชูุงู ูู Stripe)
                    $orderNumber = $session->metadata->order_number ?? null;
                    
                    // ูู ุฑูู ุงูุทูุจ ููุฌูุฏ
                    if ($orderNumber) {
                        // ุฏูุฑ ุนูู ุงูุทูุจ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช
                        $order = $this->orderModel->findByOrderNumber($orderNumber);
                        if ($order) {
                            // ุญุฏุซ ุญุงูุฉ ุงูุฏูุน ูู "paid" (ูุฏููุน)
                            $this->orderModel->updatePaymentStatus($order['id'], 'paid', $sessionId);
                            // ุญุฏุซ ุญุงูุฉ ุงูุทูุจ ูู "processing" (ููุฏ ุงูุชุฌููุฒ)
                            $this->orderModel->updateStatus($order['id'], 'processing');
                        }
                    } elseif ($orderId) {
                        // ูู ูููุด order_numberุ ุงุณุชุฎุฏู order_id (ุงุญุชูุงุทู)
                        $this->orderModel->updatePaymentStatus($orderId, 'paid', $sessionId);
                        $this->orderModel->updateStatus($orderId, 'processing');
                    }
                }
            }
        }
        
        // ุฌูุฒ ุงูุจูุงูุงุช ูุตูุญุฉ ุงููุฌุงุญ
        $data = ['title' => 'Order Success'];
        // ุงุนุฑุถ ุตูุญุฉ ุงููุฌุงุญ
        $this->view('orders/success', $data);
    }
    
    // โ ุฏุงูุฉ ุตูุญุฉ ุงูุฅูุบุงุก (ูู ุงููุณุชุฎุฏู ุฃูุบู ุงูุฏูุน ูู Stripe)
    public function cancel() {
        // ุฌูุฒ ุงูุจูุงูุงุช ูุตูุญุฉ ุงูุฅูุบุงุก
        $data = ['title' => 'Order Cancelled'];
        // ุงุนุฑุถ ุตูุญุฉ ุงูุฅูุบุงุก
        $this->view('orders/cancel', $data);
    }
}
